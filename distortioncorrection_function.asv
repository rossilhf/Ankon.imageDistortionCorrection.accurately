%本程序用于将广角/鱼眼镜头拍摄的畸变照片恢复成正常视角
function A_output=distortioncorrection_function(A0)
%A0=imread('test2.bmp');%载入图像
W=length(A0(1,:,1));%图像宽度
H=length(A0(:,1,1));%图像高度
% %以下两行数据是由实际镜头拍摄的标准模板图样中采样点数据得到的
% R=[1 2 3 4 5 6 7 8 9];%真实图像中像素到中心位置的距离
% r=[1.0000 1.9300 2.8000 3.5400 4.1800 4.7200 5.1300 5.5800 5.9000];%畸变图像中相应像素到中心位置的距离
% N=4;%拟合上述数据的多项式曲线所用阶数，可以调整
r0=20;%矫正需要依赖这样的一个假设：图像中心区域半径为r0的范围内是无失真的。在我们拍摄的三角形模板图片中，三角形边长是0.5cm，在畸变图像中心
      %为20像素长度，由于图像中心在某个三角形顶点上，所以中心区域半径为20像素长度的区域内我们假设无失真
% 
% pr2R=polyfit(r,R,N);%拟合曲线的各阶系数,该函数输入为畸变图像像素的径向坐标，输出为真实图像的径向坐标
% pR2r=polyfit(R,r,N);%拟合曲线的各阶系数,该函数输入为真实图像像素的径向坐标，输出为畸变图像的径向坐标
pr2R=[0.001743 0.010216 -0.052918 1.1364 -0.09506];
pR2r=[0.00036131 -0.0054248 -0.023879 1.0502 -0.025556];

A=zeros(3*H,3*W,3); %将原图的画布面积扩展为原来的9倍，畸变中心仍为中心位置
A=uint8(A);

for m=1:3%图像有三个色彩层
%     m
    for i=1:H %扫描扩展画布面积后图片中原图部分的所有像素
        for j=1:W
            L1=((j-0.5*(W+1))^2+(i-0.5*(H+1))^2)^0.5; %畸变像素点P到图像中心的距离(单位是像素)
%             L0=polyval(pr2R,L1/r0); %矫正后的像素P到图像中心的距离（单位是r0）
            L0=pr2R(1)*(L1/r0)^4+pr2R(2)*(L1/r0)^3+pr2R(3)*(L1/r0)^2+pr2R(4)*(L1/r0)+pr2R(5);
            L0=L0*r0;%矫正后的像素P到图像中心的距离（单位是像素）
            
            Ly1=i-0.5*(H+1);%在矫正前的图中的纵坐标，即矫正前像素到中心的纵距离（含正负）
            Lx1=j-0.5*(W+1);%在矫正前的图中的横坐标，即矫正前像素到中心的横距离（含正负）
            Ly0=Ly1*L0/L1;%在矫正后的图中的纵坐标，即矫正后像素到中心的纵距离（含正负）
            Lx0=Lx1*L0/L1;%在矫正后的图中的横坐标，即矫正后像素到中心的横距离（含正负）
            
            x0=W+((W+1)/2)+Lx0;
            y0=H+((H+1)/2)+Ly0; %矫正后的图像P坐标
            
            x0=round(x0);
            y0=round(y0);
            if x0>=1 & x0<=3*W & y0>=1 & y0<=3*H
                A(y0,x0,m)=A0(i,j,m);
            end
            if i==1 & j==0.5*W
                coordhigh=[y0 x0];%畸变图像第一行中间一列的像素坐标变换到矫正图像中后的坐标
            end
            if j==1 & i==0.5*H
                coordleft=[y0 x0];%畸变图像中间一行第一列的像素坐标变换到矫正图像中后的坐标
            end
            if j==W & i==0.5*H
                coordright=[y0 x0];%畸变图像中间一行最后一列的像素坐标变换到矫正图像中后的坐标
            end
            if i==H & j==0.5*W
                coordlow=[y0 x0];%畸变图像最后一行中间一列的像素坐标变换到矫正图像中后的坐标
            end
        end
    end
end
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %插值法1
% for m=1:3
% %     m
%     for y0=1:3*H
%         for x0=1:3*W
%             if A(y0,x0,m)==0
%                 L0=((x0-W-0.5*(W+1))^2+(y0-H-0.5*(H+1))^2)^0.5; %矫正后像素点P到图像中心的距离（单位是像素）
% %                 L1=polyval(pR2r,L0/r0); %矫正前的像素P到图像中心的距离（单位是r0）
%                 L1=pR2r(1)*(L0/r0)^4+pR2r(2)*(L0/r0)^3+pR2r(3)*(L0/r0)^2+pR2r(4)*(L0/r0)+pR2r(5);
%                 L1=L1*r0; %矫正前的像素P到图像中心的距离（单位是像素）
%             
%                 Ly0=y0-H-0.5*(H+1);
%                 Lx0=x0-W-0.5*(W+1);
%                 Ly1=Ly0*L1/L0;
%                 Lx1=Lx0*L1/L0;
%                 
%                 j=((W+1)/2)+Lx1;
%                 i=((H+1)/2)+Ly1;
%                 
%                 j=round(j);
%                 i=round(i);
%                 if j>=1 & j<=W & i>=1 & i<=H
%                     A(y0,x0,m)=A0(i,j,m);
%                 end
%             end
%         end
%     end
% end
% A_output=A(coordhigh(1):coordlow(1),coordleft(2):coordright(2),:);
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%插值法2
A_output=A(coordhigh(1):coordlow(1),coordleft(2):coordright(2),:);
% imagesc(A_output)

A_temp=zeros(length(A_output(:,1,1)),length(A_output(1,:,1)),3);
A_temp=uint8(A_temp);
for m=1:3
    for ii=2:length(A_output(:,1,1))-1
        for jj=2:length(A_output(1,:,1))-1
            if A_output(ii,jj,m)==0
                count=0;
                for i=-1:1
                    for j=-1:1
                        if A_output(ii+i,jj+j,m)~=0
                            A_temp(ii,jj,m)=A_temp(ii,jj,m)+A_output(ii+i,jj+j,m);
                            count=count+1;
                        end
                    end
                end
                if count~=0
                    A_temp(ii,jj,m)=A_temp(ii,jj,m)/count;
                end
            end
        end
    end
end
A_output=A_output+A_temp;                        
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 
% imagesc(A0)
% figure
% imagesc(A)
% 
% figure
% imagesc(A_output)